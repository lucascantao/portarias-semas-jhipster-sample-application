package br.gov.pa.semas.portarias.domain;

import static br.gov.pa.semas.portarias.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class SetorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetorAllPropertiesEquals(Setor expected, Setor actual) {
        assertSetorAutoGeneratedPropertiesEquals(expected, actual);
        assertSetorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetorAllUpdatablePropertiesEquals(Setor expected, Setor actual) {
        assertSetorUpdatableFieldsEquals(expected, actual);
        assertSetorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetorAutoGeneratedPropertiesEquals(Setor expected, Setor actual) {
        assertThat(expected)
            .as("Verify Setor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetorUpdatableFieldsEquals(Setor expected, Setor actual) {
        assertThat(expected)
            .as("Verify Setor relevant properties")
            .satisfies(e -> assertThat(e.getNome()).as("check nome").isEqualTo(actual.getNome()))
            .satisfies(e -> assertThat(e.getSigla()).as("check sigla").isEqualTo(actual.getSigla()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeletedAt())
                        .as("check deletedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getDeletedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSetorUpdatableRelationshipsEquals(Setor expected, Setor actual) {}
}
