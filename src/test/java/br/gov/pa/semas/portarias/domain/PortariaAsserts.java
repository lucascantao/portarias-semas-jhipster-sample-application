package br.gov.pa.semas.portarias.domain;

import static br.gov.pa.semas.portarias.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PortariaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPortariaAllPropertiesEquals(Portaria expected, Portaria actual) {
        assertPortariaAutoGeneratedPropertiesEquals(expected, actual);
        assertPortariaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPortariaAllUpdatablePropertiesEquals(Portaria expected, Portaria actual) {
        assertPortariaUpdatableFieldsEquals(expected, actual);
        assertPortariaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPortariaAutoGeneratedPropertiesEquals(Portaria expected, Portaria actual) {
        assertThat(expected)
            .as("Verify Portaria auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPortariaUpdatableFieldsEquals(Portaria expected, Portaria actual) {
        assertThat(expected)
            .as("Verify Portaria relevant properties")
            .satisfies(e -> assertThat(e.getNumero()).as("check numero").isEqualTo(actual.getNumero()))
            .satisfies(e -> assertThat(e.getData()).as("check data").isEqualTo(actual.getData()))
            .satisfies(
                e ->
                    assertThat(e.getCreatedAt())
                        .as("check createdAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getUpdatedAt())
                        .as("check updatedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getUpdatedAt())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeletedAt())
                        .as("check deletedAt")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getDeletedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPortariaUpdatableRelationshipsEquals(Portaria expected, Portaria actual) {
        assertThat(expected)
            .as("Verify Portaria relationships")
            .satisfies(e -> assertThat(e.getAssunto()).as("check assunto").isEqualTo(actual.getAssunto()))
            .satisfies(e -> assertThat(e.getSetor()).as("check setor").isEqualTo(actual.getSetor()))
            .satisfies(e -> assertThat(e.getUsuario()).as("check usuario").isEqualTo(actual.getUsuario()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()))
            .satisfies(e -> assertThat(e.getDeletedBy()).as("check deletedBy").isEqualTo(actual.getDeletedBy()));
    }
}
